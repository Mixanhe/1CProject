Перем Флаг;
Перем КоличествоСотрудников;

&НаКлиенте
Процедура ЗаполнитьСписокСотрудников(Команда)
	
	//ТЧСотрудники = Объект.СписокСотрудников;
	//СсылкаНаФорму = Объект.Ссылка;
	// Настанет однажды тот день, когда я смогу заполнить таблицу формы из общего модуля
	// и код будет красиво и лакончино отрабатывать.
	//РаботаСДокументамиНаСервере.ЗаполнитьСписокСотрудниковНаСервере(ТЧСотрудники,СсылкаНаФорму);
	
	ОбщееКоличествоСотрудников = РаботаСДокументамиНаСервере.ОпределитьКоличествоСотрудников();
	КоличествоСотрудниковВСписке = Объект.СписокСотрудников.Количество();
	
	Если ОбщееКоличествоСотрудников = КоличествоСотрудниковВСписке Тогда
		ОповещениеОбОшибках.ТабличнаяЧастьУжеЗаполнена();
		Возврат;
	КонецЕсли;
	ЗаполнитьСписокСотрудниковНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСотрудниковНаСервере()   
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияСотрудников.Сотрудник КАК ФИО,
	|	НачисленияСотрудников.Сумма КАК Сумма
	|ИЗ
	|	РегистрСведений.НачисленияСотрудников КАК НачисленияСотрудников";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ТЧСписокСотрудников = Объект.СписокСотрудников;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		// колзохная проверка на то, что табличная часть уже заполнена
		// ну, по идее она просто перебирает тч и сравнивает ее с выборкой
		// чтобы при повторном нажатии кнопки "заполнить табличную часть"
		// она не заполнялась такими же данными, а самое главное, чтобы при
		// нажатии на эту кнопку Табличная часть дополнилась недостающими сотрудниками.
		Для Каждого ТекущаяСтрока ИЗ ТЧСписокСотрудников Цикл
			Если ТекущаяСтрока.ФИО = ВыборкаДетальныеЗаписи.ФИО Тогда
				Флаг = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		
		// добавляем сотрудниак, если флаг в положении ЛОЖЬ, если флаг в иситна
		// тогда просто пропускаем эту итерацию цикла, и переходим к следующей
		Если НЕ Флаг = Истина Тогда
			НоваяСтрока = Объект.СписокСотрудников.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальныеЗаписи);
		КонецЕсли;
		
	КонецЦикла;                                          	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаСервере()
	Элементы.СписокСотрудников.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	ОбновитьДанныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыплатитьПолнуюСуммуЗаработнойЛпаты(Команда)
	
	ОбщееКоличествоСотрудников = РаботаСДокументамиНаСервере.ОпределитьКоличествоСотрудников();
	КоличествоСотрудниковВСписке = Объект.СписокСотрудников.Количество();
	
	// проверка 1, если в ТЧ есть все сотрудники, тут простая проверка просто на количество работающих лиц.
	// можно было конечно циклом сделать обьектную проверку каждой строки ТЧ с выборкой из справочника, но
	// это более трудоемкая работа, и гораздо более обьемное количество кода, да и при больших обьемах данныъ
	// скорее всего будет прилично так зависать база. Проверка будет более простой, в расчете на то, что в этом
	// справочнике находятся только те сотрудники, которые работают на предприятии на текущий момент времени.
	
	Если КоличествоСотрудниковВСписке = ОбщееКоличествоСотрудников  Тогда	
		АвтоматическоеДополнениеКолонкиЗарплатыНаСервере();	
	ИначеЕсли КоличествоСотрудниковВСписке = 0 Тогда	
		ОповещениеОбОшибках.ТабличнаяЧастьНеЗаполнена();		
	Иначе
		// сюда попадают все остальные случаи, которые нужно обработать
		// так же нужно предусмотреть ситуацию, если какой-то сотрудник
		// В тч будет записан ДВАЖДЫ! Эту проблему нужно обработать 
		// и вывести соответсвующее сообщение для пользователя, а так же
		// отменить проведение документа.
		
		// проверка на уникальность в табличной части. Так как 
		// важно, чтобы одному сотруднику дважды не записалась зарплата.
		// и в целом стоило бы улучшить целостность программы.
		ТЧСотрудники = Объект.СписокСотрудников;
		
		// обработка ситуаций, если коллизии имеются.
		Если РаботаСДокументамиНаСервере.ПроверкаКоллизийТабличнойЧасти(ТЧСотрудники)  Тогда		
			Сообщить("Есть коллизии");			
		КонецЕсли;
		
		
		
		
		
		
		
		Оповещение = Новый  ОписаниеОповещения ("ОтветНаВопрос",ЭтотОбъект);
		ТекстВопроса = "Заполнены не все сотрудники предприятия, дополнить таблицу автоматически?";
		ПоказатьВопрос(Оповещение,ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопрос (Результат, ДополнительныеПараметры)  Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда	
		ТЧСотрудники = Объект.СписокСотрудников;
		АвтоматическоеДополнениеТаблицыСотрудниковНаСервере(ТЧСотрудники);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическоеДополнениеТаблицыСотрудниковНаСервере(Список)
	Список.Очистить();
	ЗаполнитьСписокСотрудниковНаСервере();
КонецПроцедуры

&НаСервере
Процедура АвтоматическоеДополнениеКолонкиЗарплатыНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДолгиПоЗаработнойПлатеСотрудникамОстатки.Сотрудник КАК Сотрудник,
	|	ДолгиПоЗаработнойПлатеСотрудникамОстатки.СуммаОстаток КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.ДолгиПоЗаработнойПлатеСотрудникам.Остатки(, ) КАК ДолгиПоЗаработнойПлатеСотрудникамОстатки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ТЧСписокСотрудников = Объект.СписокСотрудников;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл	
		Для Каждого ТекСтрока ИЗ ТЧСписокСотрудников Цикл
			
			Если ТекСтрока.ФИО = ВыборкаДетальныеЗаписи.Сотрудник Тогда	
				ТекСтрока.Сумма = ВыборкаДетальныеЗаписи.СуммаОстаток;				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатитьПоловинуЗарплаты(Команда)
	
	ВыплатитьПоловину = Истина;
	ОбщееКоличествоСотрудников = РаботаСДокументамиНаСервере.ОпределитьКоличествоСотрудников();
	КоличествоСотрудниковВСписке = Объект.СписокСотрудников.Количество();
	
	// проверка 1, если в ТЧ есть все сотрудники, тут простая проверка просто на количество работающих лиц.
	// можно было конечно циклом сделать обьектную проверку каждой строки ТЧ с выборкой из справочника, но
	// это более трудоемкая работа, и гораздо более обьемное количество кода, да и при больших обьемах данныъ
	// скорее всего будет прилично так зависать база. Проверка будет более простой, в расчете на то, что в этом
	// справочнике находятся только те сотрудники, которые работают на предприятии на текущий момент времени.
	Если КоличествоСотрудниковВСписке = ОбщееКоличествоСотрудников  Тогда
		
		АвтоматическоеЗаполнениеПоляПоловиныЗарплаты();
		
	ИначеЕсли КоличествоСотрудниковВСписке = 0 Тогда
		// вывести предупреждение	
		ОповещениеОбОшибках.ТабличнаяЧастьНеЗаполнена();		
	Иначе
		// сюда попадают все остальные случаи, которые нужно обработать
		// так же нужно предусмотреть ситуацию, если какой-то сотрудник
		// В тч будет записан ДВАЖДЫ! Эту проблему нужно обработать 
		// и вывести соответсвующее сообщение для пользователя, а так же
		// отменить проведение документа.
		Оповещение = Новый  ОписаниеОповещения ("ОтветНаВопрос",ЭтотОбъект);
		ТекстВопроса = "Заполнены не все сотрудники предприятия, дополнить таблицу автоматически?";
		ПоказатьВопрос(Оповещение,ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура АвтоматическоеЗаполнениеПоляПоловиныЗарплаты()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДолгиПоЗаработнойПлатеСотрудникамОстатки.Сотрудник КАК Сотрудник,
	|	ДолгиПоЗаработнойПлатеСотрудникамОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДолгиПоЗаработнойПлатеСотрудникам.Остатки КАК ДолгиПоЗаработнойПлатеСотрудникамОстатки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ТЧСписокСотрудников = Объект.СписокСотрудников;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для Каждого ТекСтрока ИЗ ТЧСписокСотрудников Цикл
			
			Если ВыборкаДетальныеЗаписи.Сотрудник = ТекСтрока.ФИО Тогда			
				ТекСтрока.Сумма = ВыборкаДетальныеЗаписи.Сумма / 2;	
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатитьВсемТолькоОклад(Команда)
	
	ОбщееКоличествоСотрудников = РаботаСДокументамиНаСервере.ОпределитьКоличествоСотрудников();
	КоличествоСотрудниковВСписке = Объект.СписокСотрудников.Количество();
	
	// проверка 1, если в ТЧ есть все сотрудники, тут простая проверка просто на количество работающих лиц.
	// можно было конечно циклом сделать обьектную проверку каждой строки ТЧ с выборкой из справочника, но
	// это более трудоемкая работа, и гораздо более обьемное количество кода, да и при больших обьемах данныъ
	// скорее всего будет прилично так зависать база. Проверка будет более простой, в расчете на то, что в этом
	// справочнике находятся только те сотрудники, которые работают на предприятии на текущий момент времени.
	Если КоличествоСотрудниковВСписке = ОбщееКоличествоСотрудников  Тогда
		
		ВыплатитьВсемТолькоОкладНаСервере();
		
	ИначеЕсли КоличествоСотрудниковВСписке = 0 Тогда
		// вывести предупреждение	
		ОповещениеОбОшибках.ТабличнаяЧастьНеЗаполнена();		
	Иначе
		// сюда попадают все остальные случаи, которые нужно обработать
		// так же нужно предусмотреть ситуацию, если какой-то сотрудник
		// В тч будет записан ДВАЖДЫ! Эту проблему нужно обработать 
		// и вывести соответсвующее сообщение для пользователя, а так же
		// отменить проведение документа.
		Оповещение = Новый  ОписаниеОповещения ("ОтветНаВопрос",ЭтотОбъект);
		ТекстВопроса = "Заполнены не все сотрудники предприятия, дополнить таблицу автоматически?";
		ПоказатьВопрос(Оповещение,ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыплатитьВсемТолькоОкладНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДолгиПоЗаработнойПлатеСотрудникам.Сотрудник КАК Сотрудник,
	|	ДолгиПоЗаработнойПлатеСотрудникам.Сумма КАК Сумма,
	|	ДолгиПоЗаработнойПлатеСотрудникам.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ДолгиПоЗаработнойПлатеСотрудникам КАК ДолгиПоЗаработнойПлатеСотрудникам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачислениеОклада КАК НачислениеОклада
	|		ПО ДолгиПоЗаработнойПлатеСотрудникам.Регистратор = НачислениеОклада.Ссылка
	|ГДЕ
	|	ДолгиПоЗаработнойПлатеСотрудникам.Регистратор = НачислениеОклада.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ТЧСотрудники = Объект.СписокСотрудников;
	
	// очередное сопоставление ТЧ и выборки 
	// для заполнения и выплаты только оклада
	// но, тут будет выплачен весь оклад.
	// а не только за последний месяц.
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для Каждого ТекущаяСтрока ИЗ ТЧСотрудники Цикл
			
			Если ТекущаяСтрока.ФИО = ВыборкаДетальныеЗаписи.Сотрудник Тогда
				ТекущаяСтрока.Сумма = ВыборкаДетальныеЗаписи.Сумма;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатитьВсемФиксированнуюСуммуПриИзменении(Элемент)
	
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаЧисла",ЭтотОбъект);
	
	ПоказатьВводЧисла(Оповещение,0,"Ввести сумму для выплаты",15,0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаЧисла (Число, ДополнительныеПараметры) Экспорт 
	
	Для Каждого Строка ИЗ Объект.СписокСотрудников Цикл
		Строка.Сумма = Число;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыплатитьВсемФиксированнуюСуммуПриИзмененииНаСервере()
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвестиВыплату(Команда)
	
	Если НЕ ЗначениеЗаполнено(ФиксированнаяСумма) Тогда
		ОповещениеОбОшибках.НеЗаполненоПолеВвода();
		Возврат;
	КонецЕсли;
	
	Если Объект.СписокСотрудников.Количество() = 0 Тогда
		ОповещениеОбОшибках.ТабличнаяЧастьНеЗаполнена();
		Возврат;
	КонецЕсли;
	
	// проверки пройдены, и просто заполним ТЧ
	ТЧСотрудники = Объект.СписокСотрудников;
	Для Каждого СтрокаТабличнойЧасти ИЗ ТЧСотрудники Цикл
		СтрокаТабличнойЧасти.Сумма = ФиксированнаяСумма;
	КонецЦикла;
	
КонецПроцедуры








