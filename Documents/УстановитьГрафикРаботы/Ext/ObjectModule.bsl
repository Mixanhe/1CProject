
Перем ВисокосныйГод;
Перем Флаг;

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ВисокосныйГод = ОпределитьВисокосныйГод(Год(ДатаНачала));
	
	Если ВисокосныйГод Тогда
		УстановитьРабочиеДниДляВисокостногоГода();
		РаботаСРегистрами.УстановитьПраздничныеДниГодаНаСервере(Ссылка);
	Иначе
		УстановитьРабочиеДниДляНевисокостногоГода();
		РаботаСРегистрами.УстановитьПраздничныеДниГодаНаСервере(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьВисокосныйГод(ВыбранныйГод)
	
	// возвращает истину, если год високостный, ложь если нет
	// поможет мне в дальнейшем спроектировать сложный график работы предприятия
	// с праздниками и правильными годами
	Если (ВыбранныйГод % 400 = 0) ИЛИ (ВыбранныйГод % 4 = 0) И (ВыбранныйГод % 100 <> 0) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьРабочиеДниДляНевисокостногоГода()
	
	НерабочиеДни = Новый Массив();  
	
	НерабочиеДни.Добавить(1);
	НерабочиеДни.Добавить(2);
	НерабочиеДни.Добавить(3);
	НерабочиеДни.Добавить(4);
	НерабочиеДни.Добавить(5);
	НерабочиеДни.Добавить(6);
	НерабочиеДни.Добавить(7);
	НерабочиеДни.Добавить(54);
	НерабочиеДни.Добавить(67);
	НерабочиеДни.Добавить(121);
	НерабочиеДни.Добавить(129);
	НерабочиеДни.Добавить(163);
	НерабочиеДни.Добавить(308);
	
	
	ДатаНачалаОтсчета = ДатаНачала;
	СекундВЧасе = 60 * 60;
	
	Движения.ГрафикРаботыПредприятия.Записывать = Истина;
	
	// переббор всех значений от даты до даты
	Пока ДатаНачалаОтсчета <= ДатаОкончания Цикл
		
		// создание движений в регистре сведений
		Движение = Движения.ГрафикРаботыПредприятия.Добавить();	
		Движение.Период = ДатаНачалаОтсчета;
		Движение.Дата = ДатаНачалаОтсчета;
		
		// перебор нерабочих дней, и сопоставление номера дня в году
		// текущему итератору цикла   Пока ДатаНачалаОтсчета <= ДатаОкончания Цикл
		// если в этом цикле будет найден нерабочий день, тогда 
		// сразу записываем, что этот день обозначен нерабочий, и выходим
		// зарание из цикла, игнорируя следующие записи, так как нерабочий день уже найден
		// вложенный цикл перебирается каждый раз с начала до конца, как основной цикл будет обновлять
		// итератор.
		Для Каждого НерабочийДень ИЗ НерабочиеДни Цикл
			
			Если ДеньГода(ДатаНачалаОтсчета) = НерабочийДень Тогда
				//// для праздничных дней
				//Движение.День = 0;
				//// добавляем к итератору +1 день
				//ДатаНачалаОтсчета = ДатаНачалаОтсчета + СекундВЧасе * 24;
				//// прерываем этот цикл, так как его дальнейший перебор не имеет смысла
				//// установка флага в положение ИСИТИНА, для того, чтобы выйти из основного цикла
				Флаг = Истина;
				Прервать;		
			КонецЕсли;	
		КонецЦикла;
		
		// если флаг, установлен в положение ИСТИНА, то праздничный нерабочий день уже установлен
		// и дальнейшее использоване цикла не имеет смысла.		
		// в таком случае просто установим для него нерабочий день
		Если Флаг = Истина Тогда				
			
			
			// обработка первых дней в году, всегда обозначенных
			// как праздничные.
			Если ДеньГода(ДатаНачалаОтсчета) < 9 Тогда
				
				// заполняем, и продолжаем цикл, так как меня больше не волнуют записи
				// об этих днях.
				Движение.День = 0;
				ДатаНачалаОтсчета = ДатаНачалаОтсчета + СекундВЧасе * 24;	
				Продолжить;
				Флаг = Ложь;
			КонецЕсли;

			
			// Проверка, если праздничный день выпадает на выходной
			// и его надо перенести на понедельник следующей недели.
			Если ДеньНедели(ДатаНачалаОтсчета) > 5 Тогда
				
				Движение.День = 0;
				
				Флаг = Ложь;
				// добавляем служебный реквизит, чтобы обозначить такие дни.
				Движение.Служебный = Истина;
				Движение.ДатаВыходногоДня = КонецНедели(ДатаНачалаОтсчета) + СекундВЧасе * 24;
				// заметка для себя, чуть не ошибся, что итератор поставил в начале
				// условия:) поэтому был небольшой ступор почему к началу недели от субботы 
				// и воскресенья приводятся разные дни. Обьяснилось тем, что итератор прибавлял день
				// и перем ДатаНачалаОтсчета стаоновилась равной понедельнику, поэтому и приводилась
				// к началу следующей недели
				// а так как восксресенье это конец предыдущей недели, соответсвенно и приведение
				// субботы, которая итерировалась уже воскресеньем, имела уже совершенно другую дату. 
				ДатаНачалаОтсчета = ДатаНачалаОтсчета + СекундВЧасе * 24;	
				Продолжить;
				
			Иначе
				// тут обрабатывается просто праздничные дни
				// если, допустим, он выпадает на середину недели.
				Движение.День = 0;
				ДатаНачалаОтсчета = ДатаНачалаОтсчета + СекундВЧасе * 24;			
				Флаг = Ложь;
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// так как предприятие работает 5 дней в неделю ставим условие
		// так же записываем время начала работы и время конца работы
		// и в конце закидыаем итератор для дня, увеличивая на сутки переменную ДатаНачалаОтсчета
		Если ДеньНедели(ДатаНачалаОтсчета) < 6 Тогда
			
			// условие, когда в последний рабочий день недели 
			// рабочий день сокращен на час
			//  использование оператора продолить досрочно завершило мне цикл, чтобы не формировались
			// дальнейшие записи в регистр по этой дате
			Если ДеньНедели(ДатаНачалаОтсчета) = 5 Тогда
				
				Движение.День = 1;
				Движение.ВремяНачалаРаботы = ДатаНачалаОтсчета + СекундВЧасе * 8;
				Движение.ВремяОкончанияРаботы = ДатаНачалаОтсчета + СекундВЧасе * 16;
				ДатаНачалаОтсчета = ДатаНачалаОтсчета + СекундВЧасе * 24;
				Продолжить;
			КонецЕсли;
			
			// тут записываются движения в обычный рабочий день
			Движение.День = 1;
			Движение.ВремяНачалаРаботы = ДатаНачалаОтсчета + СекундВЧасе * 8;
			Движение.ВремяОкончанияРаботы = ДатаНачалаОтсчета + СекундВЧасе * 17;
			ДатаНачалаОтсчета = ДатаНачалаОтсчета + СекундВЧасе * 24;		
		Иначе
			// для выходных дней
			Движение.День = 0;
			ДатаНачалаОтсчета = ДатаНачалаОтсчета + СекундВЧасе * 24;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Записать();
	
КонецПроцедуры

Процедура УстановитьРабочиеДниДляВисокостногоГода()
	
	НерабочиеДни = Новый Массив();
	НерабочиеДни.Добавить(1);
	НерабочиеДни.Добавить(2);
	НерабочиеДни.Добавить(3);
	НерабочиеДни.Добавить(4);
	НерабочиеДни.Добавить(5);
	НерабочиеДни.Добавить(6);
	НерабочиеДни.Добавить(7);
	НерабочиеДни.Добавить(54);
	НерабочиеДни.Добавить(68);
	НерабочиеДни.Добавить(122);
	НерабочиеДни.Добавить(130);
	НерабочиеДни.Добавить(164);
	НерабочиеДни.Добавить(309);
	
	ДатаНачалаОтсчета = ДатаНачала;
	СекундВЧасе = 60 * 60;
	
	Движения.ГрафикРаботыПредприятия.Записывать = Истина;
	
	// переббор всех значений от даты до даты
	Пока ДатаНачалаОтсчета <= ДатаОкончания Цикл
		
		// создание движений в регистре сведений
		Движение = Движения.ГрафикРаботыПредприятия.Добавить();	
		Движение.Период = ДатаНачалаОтсчета;
		Движение.Дата = ДатаНачалаОтсчета;
		
		// перебор нерабочих дней, и сопоставление номера дня в году
		// текущему итератору цикла   Пока ДатаНачалаОтсчета <= ДатаОкончания Цикл
		// если в этом цикле будет найден нерабочий день, тогда 
		// сразу записываем, что этот день обозначен нерабочий, и выходим
		// зарание из цикла, игнорируя следующие записи, так как нерабочий день уже найден
		// вложенный цикл перебирается каждый раз с начала до конца, как основной цикл будет обновлять
		// итератор.
		Для Каждого НерабочийДень ИЗ НерабочиеДни Цикл
			
			Если ДеньГода(ДатаНачалаОтсчета) = НерабочийДень Тогда
				//// для праздничных дней
				//Движение.День = 0;
				//// добавляем к итератору +1 день
				//ДатаНачалаОтсчета = ДатаНачалаОтсчета + СекундВЧасе * 24;
				//// прерываем этот цикл, так как его дальнейший перебор не имеет смысла
				//// установка флага в положение ИСИТИНА, для того, чтобы выйти из основного цикла
				Флаг = Истина;
				Прервать;		
			КонецЕсли;	
		КонецЦикла;
		
		// если флаг, установлен в положение ИСТИНА, то праздничный нерабочий день уже установлен
		// и дальнейшее использоване цикла не имеет смысла.		
		// в таком случае просто установим для него нерабочий день
		Если Флаг = Истина Тогда				
			
			// обработаем ситуацию, когда нужно просто установить 
			// нерабочие дни в начале годе, без учета выходных и прочего.
			// без перенесов итд, поэтому просто обработаем такую ситуцию
			// обработка праздничных дней.
			Если ДеньГода(ДатаНачалаОтсчета) < 9 Тогда
				
				// заполняем, и продолжаем цикл, так как меня больше не волнуют записи
				// об этих днях.
				Движение.День = 0;
				ДатаНачалаОтсчета = ДатаНачалаОтсчета + СекундВЧасе * 24;	
				Продолжить;
				Флаг = Ложь;
			КонецЕсли;
			// Проверка, если праздничный день выпадает на выходной
			// и его надо перенести на понедельник следующей недели.
			Если ДеньНедели(ДатаНачалаОтсчета) > 5 Тогда
				
				Движение.День = 0;
				
				Флаг = Ложь;
				// добавляем служебный реквизит, чтобы обозначить такие дни.
				Движение.Служебный = Истина;
				Движение.ДатаВыходногоДня = КонецНедели(ДатаНачалаОтсчета) + СекундВЧасе * 24;
				// заметка для себя, чуть не ошибся, что итератор поставил в начале
				// условия:) поэтому был небольшой ступор почему к началу недели от субботы 
				// и воскресенья приводятся разные дни. Обьяснилось тем, что итератор прибавлял день
				// и перем ДатаНачалаОтсчета стаоновилась равной понедельнику, поэтому и приводилась
				// к началу следующей недели
				// а так как восксресенье это конец предыдущей недели, соответсвенно и приведение
				// субботы, которая итерировалась уже воскресеньем, имела уже совершенно другую дату. 
				ДатаНачалаОтсчета = ДатаНачалаОтсчета + СекундВЧасе * 24;	
				Продолжить;
				
			Иначе
				// тут обрабатывается просто праздничные дни
				// если, допустим, он выпадает на середину недели.
				Движение.День = 0;
				ДатаНачалаОтсчета = ДатаНачалаОтсчета + СекундВЧасе * 24;			
				Флаг = Ложь;
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// так как предприятие работает 5 дней в неделю ставим условие
		// так же записываем время начала работы и время конца работы
		// и в конце закидыаем итератор для дня, увеличивая на сутки переменную ДатаНачалаОтсчета
		Если ДеньНедели(ДатаНачалаОтсчета) < 6 Тогда
			
			// условие, когда в последний рабочий день недели 
			// рабочий день сокращен на час
			//  использование оператора продолить досрочно завершило мне цикл, чтобы не формировались
			// дальнейшие записи в регистр по этой дате
			Если ДеньНедели(ДатаНачалаОтсчета) = 5 Тогда
				
				Движение.День = 1;
				Движение.ВремяНачалаРаботы = ДатаНачалаОтсчета + СекундВЧасе * 8;
				Движение.ВремяОкончанияРаботы = ДатаНачалаОтсчета + СекундВЧасе * 16;
				ДатаНачалаОтсчета = ДатаНачалаОтсчета + СекундВЧасе * 24;
				Продолжить;
			КонецЕсли;
			
			// тут записываются движения в обычный рабочий день
			Движение.День = 1;
			Движение.ВремяНачалаРаботы = ДатаНачалаОтсчета + СекундВЧасе * 8;
			Движение.ВремяОкончанияРаботы = ДатаНачалаОтсчета + СекундВЧасе * 17;
			ДатаНачалаОтсчета = ДатаНачалаОтсчета + СекундВЧасе * 24;		
		Иначе
			// для выходных дней
			Движение.День = 0;
			ДатаНачалаОтсчета = ДатаНачалаОтсчета + СекундВЧасе * 24;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Записать();
	
КонецПроцедуры;




